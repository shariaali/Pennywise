@using Pennywise.Services.Interfaces
@using Pennywise.Model
@inject IJSRuntime JS

// Modal backdrop container for the debt form
<div class="modal-backdrop">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Header section with title and close button -->
            <div class="modal-header">
                <h3>Add debt</h3>
                <button class="close-button" @onclick="OnCancel">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            @* EditForm component for handling form submission and validation *@
            <EditForm Model="@Debt" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <!-- Source of debt input field -->
                <div class="form-field">
                    <label>Source of Debt:</label>
                    <input type="text" class="input-field" @bind="Debt.Source" 
                           placeholder="Add the source of your debt" />
                    <ValidationMessage For="@(() => Debt.Source)" />
                </div>

                <!-- Payment due date and amount input fields -->
                <div class="form-row">
                    <div class="form-field">
                        <label>Payment Due Date:</label>
                        <div class="date-input-wrapper">
                            <input type="date" class="input-field" @bind="Debt.DueDate" />
                           
                        </div>
                        <ValidationMessage For="@(() => Debt.DueDate)" />
                    </div>

                    <div class="form-field">
                        <label>Amount:</label>
                        <input type="number" step="0.01" class="input-field" @bind="Debt.Amount" 
                               placeholder="$XX.XX" />
                        <ValidationMessage For="@(() => Debt.Amount)" />
                    </div>
                </div>

                <!-- Optional notes textarea -->
                <div class="form-field">
                    <label>Notes (Optional):</label>
                    <textarea class="input-field" @bind="Debt.Notes" 
                             placeholder="Add an optional memo about your debt"></textarea>
                </div>

                <!-- Form submit button -->
                <div class="modal-footer">
                    <button type="submit" class="btn-primary">ADD DEBT</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // Component parameters for data binding and event callbacks
    [Parameter] public Debt Debt { get; set; } = new();
    [Parameter] public EventCallback<Debt> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    /*
     * Handles the form submission
     * Validates the amount is greater than 0
     * Invokes the OnSave callback if validation passes
     */
    private async Task HandleSubmit()
    {
        if (Debt.Amount <= 0)
        {
            await JS.InvokeVoidAsync("alert", "Amount must be greater than 0");
            return;
        }

        await OnSave.InvokeAsync(Debt);
    }
} 