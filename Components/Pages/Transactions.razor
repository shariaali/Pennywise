@using System
@using Pennywise.Components.Shared
@page "/transactions"
@using System.Text
@using Pennywise.Model;
@using Pennywise.Services.Interfaces;
@inject NavigationManager Nav
@inject ITransactionService TransactionService
@inject ITagService TagService
@inject IJSRuntime JS
@inject IFileExportService FileExportService
@inject IUserService UserService

// Main container for the transactions page
<div class="transactions-page">
    <div class="header">
        <div class="header-left">
            <h3>View all transactions</h3>
        </div>
        <div class="actions">
            <button class="sort-btn" @onclick="ToggleSort">
                <i class="fas fa-sort"></i>
                @(IsAscending ? "Oldest First" : "Newest First")
            </button>
            <button class="btn-export" @onclick="ExportToCsv">
                Export CSV <i class="fas fa-download"></i>
            </button>
            <button class="btn-add" @onclick="AddTransaction">
                Add Transaction <i class="fas fa-plus"></i>
            </button>
        </div>
    </div>

    /* Stats cards section showing:
     * - Total number of transactions
     * - Total income
     * - Total expenses
     */
    <div class="stats-cards">
        <div class="stat-card">
            <span class="label">Total Transactions</span>
            <span class="value">@FilteredTransactions?.Count</span>
        </div>
        <div class="stat-card">
            <span class="label">Total Income</span>
            <span class="value income">@FormatAmount(_totalInflows)</span>
        </div>
        <div class="stat-card">
            <span class="label">Total Expense</span>
            <span class="value expense">@FormatAmount(_totalOutflows)</span>
        </div>
    </div>

    // Filter section for searching and filtering transactions
    <div class="filters">
        <div class="search-box">
            <input type="text" @bind="SearchTitle" placeholder="Search by Title" />
        </div>
        <select @bind="FilterType" class="filter-select">
            <option value="">Transaction type</option>
            <option value="Inflow">Income</option>
            <option value="Outflow">Expense</option>
            <option value="DEBT">Debt</option>
        </select>
        <select @bind="FilterTags" class="filter-select">
            <option value="">Tags</option>
            @foreach (var tag in _defaultTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>
        <div class="form-field">
            <label>Start Date</label>
            <input type="date" @bind="StartDate" class="filter-date"/>
        </div>
        <div class="form-field">
            <label>End Date</label>
            <input type="date" @bind="EndDate" class="filter-date"/>
        </div>
        <button class="btn-filter" @onclick="ApplyFiltersAndSearch">Apply Filters</button>
        <button class="btn-clear" @onclick="ClearFilters">Clear</button>
    </div>

    // Main transactions table
    <div class="transactions-table">
        <table>
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Type</th>
                    <th>Date</th>
                    <th>Tags</th>
                    <th>Note</th>
                </tr>
            </thead>
            <tbody>
                @if (FilteredTransactions == null || FilteredTransactions.Count == 0)
                {
                    <tr>
                        <td colspan="7">No transactions available</td>
                    </tr>
                }
                else
                {
                    @foreach (var transaction in FilteredTransactions)
                    {
                        <tr>
                            <td>@transaction.Title</td>
                            <td class="amount-column">
                                @{
                                    string amountPrefix = transaction.Type switch
                                    {
                                        "Inflow" => "+",
                                        "DEBT" when transaction.Title?.StartsWith("Debt from") == true => "+",
                                        _ => "-"
                                    };

                                    string amountClass = transaction.Type switch
                                    {
                                        "Inflow" => "credit-amount",
                                        "DEBT" when transaction.Title?.StartsWith("Debt from") == true => "credit-amount",
                                        _ => "debit-amount"
                                    };
                                }
                                <span class="@amountClass">@amountPrefix@FormatAmount(Math.Abs(transaction.Amount))</span>
                            </td>
                            <td>
                                @{
                                    string badgeClass = transaction.Type switch
                                    {
                                        "Inflow" => "credit-badge",
                                        "DEBT" => "debt-badge",
                                        _ => "debit-badge"
                                    };

                                    string displayType = transaction.Type switch
                                    {
                                        "Inflow" => "CREDIT",
                                        "DEBT" => "DEBT",
                                        _ => "DEBIT"
                                    };
                                }
                                <span class="@badgeClass">@displayType</span>
                            </td>
                            <td>@transaction.Date.ToShortDateString()</td>
                            <td>
                                <div class="tags-wrapper">
                                    @foreach (var tag in transaction.Tags?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>())
                                    {
                                        <span class="tag-badge">@tag.Trim()</span>
                                    }
                                </div>
                            </td>
                            <td class="note-column">
                                <span>@(string.IsNullOrEmpty(transaction.Note) ? "-" : transaction.Note)</span>
                                @if (transaction.Type != "DEBT")
                                {
                                    <button class="action-menu" @onclick="() => ToggleDropdown(transaction.TransactionId)">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    @if (activeDropdown == transaction.TransactionId)
                                    {
                                        <div class="dropdown-menu show">
                                            <div class="dropdown-item" @onclick="() => NavigateToEditPage(transaction.TransactionId)">
                                                <i class="fas fa-edit"></i> Edit
                                            </div>
                                            <div class="dropdown-item" @onclick="() => DeleteTransaction(transaction.TransactionId)">
                                                <i class="fas fa-trash"></i> Delete
                                            </div>
                                        </div>
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

// Modal for adding new transactions
@if (showTransactionModal)
{
    <TransactionModal 
        Transaction="currentTransaction"
        OnSave="HandleTransactionSave"
        OnCancel="() => showTransactionModal = false"
        CurrentBalance="_balance" />
}

// Modal for editing existing transactions
@if (showEditModal)
{
    <EditTransactionModal 
        Transaction="selectedTransaction"
        OnSave="HandleTransactionSave"
        OnCancel="() => showEditModal = false"
        CurrentBalance="_balance" />
}

@code {
    // Private fields for storing transaction data and state
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> FilteredTransactions = new List<Transaction>();
    
    /* Financial totals:
     * - Total inflows (income)
     * - Total outflows (expenses)
     * - Current balance
     */
    private decimal _totalInflows;
    private decimal _totalOutflows;
    private decimal _balance;

    // Filter state variables
    private string SearchTitle;
    private string FilterType;
    private string FilterTags;
    private DateTime? StartDate;
    private DateTime? EndDate;

    // Sorting preferences
    private string SortBy { get; set; } = "Date";
    private bool IsAscending { get; set; } = true;

    // Predefined list of transaction tags
    private readonly List<string> _defaultTags = new List<string>
    {
        "Yearly", "Monthly", "Food", "Drinks", "Clothes", "Gadgets",
        "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    };

    // UI state variables
    private int? activeDropdown;
    private bool showTransactionModal;
    private Transaction currentTransaction = new();
    private bool showEditModal = false;
    private Transaction selectedTransaction;

    private string PreferredCurrency => UserService.PreferredCurrency;

    /* Methods below handle:
     * - Page initialization
     * - Transaction CRUD operations
     * - Filtering and sorting
     * - CSV export
     * - Currency formatting
     */
    protected override async Task OnInitializedAsync()
    {
        try
        {
            transactions = await TransactionService.LoadTransactionsAsync();
            FilteredTransactions = transactions;
            
            var sums = TransactionService.CalculateTransactionSums(transactions);
            _totalInflows = sums.totalInflows;
            _totalOutflows = sums.totalOutflows;
            _balance = sums.balance;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
        activeDropdown = null;
    }

    private async Task LoadTransactionsAsync()
    {
        try
        {
            FilteredTransactions = await TransactionService.LoadTransactionsAsync();
            FilteredTransactions = IsAscending 
                ? FilteredTransactions.OrderBy(t => t.Date).ToList()
                : FilteredTransactions.OrderByDescending(t => t.Date).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private async Task NavigateToEditPage(int id)
    {
        try 
        {
            selectedTransaction = await TransactionService.GetTransactionAsync(id);
            showEditModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading transaction: {ex.Message}");
        }
    }

    private async Task DeleteTransaction(int transactionId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?");
        if (confirmed)
        {
            try
            {
                await TransactionService.DeleteTransactionAsync(transactionId);
                FilteredTransactions = await TransactionService.LoadTransactionsAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting transaction: {ex.Message}");
            }
        }
    }

    private async Task ApplyFiltersAndSearch()
    {
        FilteredTransactions = transactions;

        if (!string.IsNullOrEmpty(SearchTitle))
        {
            FilteredTransactions = FilteredTransactions.Where(t => 
                t.Title.Contains(SearchTitle, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(FilterType))
        {
            FilteredTransactions = FilteredTransactions.Where(t => t.Type == FilterType).ToList();
        }

        if (!string.IsNullOrEmpty(FilterTags))
        {
            FilteredTransactions = FilteredTransactions.Where(t => 
                t.Tags != null && t.Tags.Contains(FilterTags)).ToList();
        }

        if (StartDate.HasValue)
        {
            FilteredTransactions = FilteredTransactions.Where(t => t.Date >= StartDate.Value).ToList();
        }

        if (EndDate.HasValue)
        {
            FilteredTransactions = FilteredTransactions.Where(t => t.Date <= EndDate.Value).ToList();
        }

        var sums = TransactionService.CalculateTransactionSums(FilteredTransactions);
        _totalInflows = sums.totalInflows;
        _totalOutflows = sums.totalOutflows;
    }

    private async Task ApplySorting()
    {
        if (IsAscending)
        {
            FilteredTransactions = await TransactionService.SortTransactionsAscending("date");
        }
        else
        {
            FilteredTransactions = await TransactionService.SortTransactionsDescending("date");
        }
    }

    private async Task ClearFilters()
    {
        SearchTitle = "";
        FilterTags = "";
        FilterType = "";
        StartDate = null;
        EndDate = null;
        SortBy = "Date";
        IsAscending = true;
        await LoadTransactionsAsync();
    }

    private async Task DeleteTag(string tag)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the tag '{tag}'?");
        if (confirmed)
        {
            try
            {
                await TagService.DeleteCustomTagAsync(tag);
                FilteredTransactions = await TransactionService.LoadTransactionsAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error deleting tag: {ex.Message}");
            }
        }
    }

    private async Task ExportToCsv()
    {
        try
        {
            var transactions = FilteredTransactions ?? await TransactionService.LoadTransactionsAsync();
            
            var csvContent = new StringBuilder();
            csvContent.AppendLine("Title,Amount,Type,Date,Tags,Note");
            
            foreach (var transaction in transactions)
            {
                var line = $"{transaction.Title},{FormatAmount(transaction.Amount)},{transaction.Type}," +
                          $"{transaction.Date:yyyy-MM-dd},{transaction.Tags},{transaction.Note}";
                csvContent.AppendLine(line);
            }

            var fileName = $"transactions_export_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            await FileExportService.ExportToCsvAsync(csvContent.ToString(), fileName);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error exporting transactions: {ex.Message}");
        }
    }

    private void AddTransaction()
    {
        currentTransaction = new Transaction 
        { 
            Date = DateTime.Today,
            TransactionId = 0
        };
        showTransactionModal = true;
    }

    private void ToggleDropdown(int transactionId)
    {
        if (activeDropdown == transactionId)
            activeDropdown = null;
        else
            activeDropdown = transactionId;
    }

    private async Task HandleTransactionSave(Transaction transaction)
    {
        try
        {
            await TransactionService.SaveTransactionAsync(transaction);
            showTransactionModal = false;
            await LoadTransactionsAsync();
            
            var sums = TransactionService.CalculateTransactionSums(FilteredTransactions);
            _totalInflows = sums.totalInflows;
            _totalOutflows = sums.totalOutflows;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving transaction: {ex.Message}");
        }
    }

    private async Task HandleEditTransactionSave(Transaction transaction)
    {
        try
        {
            await TransactionService.SaveTransactionAsync(transaction);
            showEditModal = false;
            await LoadTransactionsAsync();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving transaction: {ex.Message}");
        }
    }

    private async Task ToggleSort()
    {
        IsAscending = !IsAscending;
        FilteredTransactions = IsAscending 
            ? FilteredTransactions.OrderBy(t => t.Date).ToList()
            : FilteredTransactions.OrderByDescending(t => t.Date).ToList();
    }

    private string GetCurrencySymbol()
    {
        switch (PreferredCurrency)
        {
            case "USD":
                return "$";
            case "NPR":
                return "Rs.";
            default:
                return "$";
        }
    }

    private string FormatAmount(decimal amount)
    {
        return $"{GetCurrencySymbol()} {amount:N2}";
    } 
}


