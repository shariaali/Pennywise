@using System
@page "/transactions"
@using Pennywise.Model;
@using Pennywise.Services.Interfaces;
@inject NavigationManager Nav
@inject ITransactionService TransactionService
@inject ITagService TagService
@inject IJSRuntime JS

<div class="transactions-page">
    <div class="header">
        <h3>View all transactions</h3>
        <div class="actions">
            <div class="search-box">
                <input type="text" @bind="SearchTitle" placeholder="Search" />
            </div>
            <button class="btn-add" @onclick="AddTransaction">
                Add Transaction <i class="fas fa-plus"></i>
            </button>
        </div>
    </div>

    <div class="stats-cards">
        <div class="stat-card">
            <span class="label">Total Transactions</span>
            <span class="value">@FilteredTransactions?.Count</span>
        </div>
        <div class="stat-card">
            <span class="label">Total Income</span>
            <span class="value income">$@_totalInflows</span>
        </div>
        <div class="stat-card">
            <span class="label">Total Expense</span>
            <span class="value expense">$@_totalOutflows</span>
        </div>
    </div>

    <div class="filters">
        <select @bind="FilterType" class="filter-select">
            <option value="">Transaction type</option>
            <option value="Inflow">Income</option>
            <option value="Outflow">Expense</option>
        </select>
        <select @bind="FilterTags" class="filter-select">
            <option value="">Tags</option>
            @foreach (var tag in _defaultTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>
        <input type="date" @bind="StartDate" class="filter-date" placeholder="Start Date"/>
        <input type="date" @bind="EndDate" class="filter-date" placeholder="End Date"/>
        <button class="btn-filter" @onclick="ApplyFiltersAndSearch">Apply Filters</button>
        <button class="btn-clear" @onclick="ClearFilters">Clear</button>
        <button class="btn-export" @onclick="ExportToCsv">
            Export CSV <i class="fas fa-download"></i>
        </button>
    </div>

    <div class="transactions-table">
        <table>
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Type</th>
                    <th>Date</th>
                    <th>Tags</th>
                    <th>Note</th>
                </tr>
            </thead>
            <tbody>
                @if (FilteredTransactions == null || FilteredTransactions.Count == 0)
                {
                    <tr>
                        <td colspan="7">No transactions available</td>
                    </tr>
                }
                else
                {
                    @foreach (var transaction in FilteredTransactions)
                    {
                        <tr>
                            <td>@transaction.Title</td>
                            <td class="@(transaction.Type == "Inflow" ? "income" : "expense")">
                                @(transaction.Type == "Inflow" ? "+" : "-")$@Math.Abs(transaction.Amount)
                            </td>
                            <td>
                                <span class="@(transaction.Type == "Inflow" ? "credit-badge" : "debit-badge")">
                                    @(transaction.Type == "Inflow" ? "CREDIT" : "DEBIT")
                                </span>
                            </td>
                            <td>@(transaction.Date?.ToShortDateString() ?? "N/A")</td>
                            <td>
                                <div class="tags-wrapper">
                                    @foreach (var tag in transaction.Tags?.Split(',', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>())
                                    {
                                        <span class="tag-badge">@tag.Trim()</span>
                                    }
                                </div>
                            </td>
                            <td class="note-column">
                                <span>@(string.IsNullOrEmpty(transaction.Note) ? "-" : transaction.Note)</span>
                                <button class="action-menu" @onclick="@(() => ToggleDropdown(transaction.TransactionId))">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <div class="dropdown-menu @(activeDropdown == transaction.TransactionId ? "show" : "")">
                                    <div class="dropdown-item" @onclick="() => NavigateToEditPage(transaction.TransactionId)">
                                        <i class="fas fa-edit"></i>
                                        <span>Edit</span>
                                    </div>
                                    <div class="dropdown-item" @onclick="() => DeleteTransaction(transaction.TransactionId)">
                                        <i class="fas fa-trash"></i>
                                        <span>Delete</span>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> FilteredTransactions = new List<Transaction>();
    private decimal _totalInflows;
    private decimal _totalOutflows;

    private string SearchTitle;
    private string FilterType;
    private string FilterTags;
    private DateTime? StartDate;
    private DateTime? EndDate;


    // For sorting
    private string SortBy { get; set; } = "Date";
    private bool IsAscending { get; set; } = true;

    private readonly List<string> _defaultTags = new List<string>
    {
        "Yearly", "Monthly", "Food", "Drinks", "Clothes", "Gadgets",
        "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    };

    private int? activeDropdown;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            transactions = await TransactionService.LoadTransactionsAsync();
            FilteredTransactions = transactions;
            
            // Calculate totals using the same method as Home page
            var sums = TransactionService.CalculateTransactionSums(transactions);
            _totalInflows = sums.totalInflows;
            _totalOutflows = sums.totalOutflows;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
        activeDropdown = null;
    }

    private async Task LoadTransactionsAsync()
    {
        try
        {
            FilteredTransactions = await TransactionService.LoadTransactionsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }


    private void NavigateToEditPage(int transactionId)
    {
        Nav.NavigateTo($"/edittransaction/{transactionId}");
    }

    private async Task DeleteTransaction(int transactionId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?");
        if (confirmed)
        {
            try
            {
                await TransactionService.DeleteTransactionAsync(transactionId);
                FilteredTransactions = await TransactionService.LoadTransactionsAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting transaction: {ex.Message}");
            }
        }
    }

    private async Task ApplyFiltersAndSearch()
    {
        var filtered = await TransactionService.FilterTransactionsAsync(StartDate, EndDate, FilterType, FilterTags);
        if (!string.IsNullOrEmpty(SearchTitle))
        {
            filtered = filtered.Where(t => t.Title.Contains(SearchTitle, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        FilteredTransactions = filtered;
    }
    private async Task ApplySorting()
    {
        if (IsAscending)
        {
            // Apply ascending sort
            FilteredTransactions = await TransactionService.SortTransactionsAscending("date");
        }
        else
        {
            // Apply descending sort
            FilteredTransactions = await TransactionService.SortTransactionsDescending("date");
        }
    }
    private async Task ClearFilters()
    {
        SearchTitle = "";
        FilterTags = "";
        FilterType = "";
        StartDate = null;
        EndDate = null;
        SortBy = "Date";
        IsAscending = true;
        await LoadTransactionsAsync();
    }


    private async Task DeleteTag(string tag)
{
    var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the tag '{tag}'?");
    if (confirmed)
    {
        try
        {
            await TagService.DeleteCustomTagAsync(tag);
            // Refresh transactions to update tags
            FilteredTransactions = await TransactionService.LoadTransactionsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error deleting tag: {ex.Message}");
        }
    }
}

    private async Task ExportToCsv()
    {
        // Implementation for CSV export
        await JS.InvokeVoidAsync("alert", "Export functionality coming soon");
    }

    private void AddTransaction()
    {
        Nav.NavigateTo("/addtransaction");
    }

    private void ToggleDropdown(int transactionId)
    {
        if (activeDropdown == transactionId)
            activeDropdown = null;
        else
            activeDropdown = transactionId;
    }
}