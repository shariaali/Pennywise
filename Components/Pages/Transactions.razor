@page "/transactions"
@using Pennywise.Model;
@using Pennywise.Services.Interfaces;
@inject NavigationManager Nav
@inject ITransactionService TransactionService
@inject IJSRuntime JS

<h3>Transactions</h3>

<div class="table-container">
    <table class="transactions-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Date</th>
                <th>Tags</th>
                <th>Note</th>
                <th>Actions</th> <!-- Added Actions column -->
            </tr>
        </thead>
        <tbody>
            @if (transactions == null || transactions.Count == 0)
            {
                <tr>
                    <td colspan="8">No transactions available</td>
                </tr>
            }
            else
            {
                @foreach (var transaction in transactions)
                {
                    <tr>
                        <td>@transaction.TransactionId</td>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.Type</td>
                        <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                        <td>@transaction.Tags</td>
                        <td>@transaction.Note</td>
                        <td>
                            <button @onclick="() => NavigateToEditPage(transaction.TransactionId)" class="btn btn-primary">Edit</button>
                            <button @onclick="() => DeleteTransaction(transaction.TransactionId)" class="btn btn-danger">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Transaction> transactions = new List<Transaction>();

    protected override async Task OnInitializedAsync()
    {
        // Get all transactions from the service
        try
        {
            transactions = await TransactionService.LoadTransactionsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private void NavigateToEditPage(int transactionId)
    {
        Nav.NavigateTo($"/edit-transaction/{transactionId}");
    }

    private async Task DeleteTransaction(int transactionId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?");
        if (confirmed)
        {
            try
            {
                await TransactionService.DeleteTransactionAsync(transactionId);
                // Reload the transactions list after deletion
                transactions = await TransactionService.LoadTransactionsAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting transaction: {ex.Message}");
            }
        }
    }
}
