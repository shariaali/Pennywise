@page "/transactions"
@using Pennywise.Model;
@using Pennywise.Services.Interfaces;
@inject NavigationManager Nav
@inject ITransactionService TransactionService
@inject ITagService TagService
@inject IJSRuntime JS

<h3>Transactions</h3>

<div class="filter-container">
    <h3>Filters</h3>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="searchTitle">Search by Title:</label>
            <input type="text" id="searchTitle" @bind="SearchTitle" class="form-control" placeholder="Enter title" />
        </div>
        <div class="form-group col-md-6">
            <label for="filterTags">Filter by Tags:</label>
            <input type="text" id="filterTags" @bind="FilterTags" class="form-control" placeholder="Enter tags" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="filterType">Filter by Type:</label>
            <select id="filterType" @bind="FilterType" class="form-control">
                <option value="">All</option>
                <option value="Inflow">Inflow</option>
                <option value="Outflow">Outflow</option>
            </select>
        </div>
        <div class="form-group col-md-6">
            <label for="startDate">Start Date:</label>
            <input type="date" id="startDate" @bind="StartDate" class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="endDate">End Date:</label>
            <input type="date" id="endDate" @bind="EndDate" class="form-control" />
        </div>
        <div class="form-group col-md-6 d-flex align-items-end">
            <button @onclick="ApplyFiltersAndSearch" class="btn btn-primary mr-2">Apply Filters</button>
            <button @onclick="ClearFilters" class="btn btn-secondary">Clear Filters</button>
        </div>
    </div>
</div>
<div class="sort-container mt-4">
    <h3>Sorting</h3>
    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="sortDate">Sort by:</label>
            <select id="sortDate" @bind="SortBy" class="form-control">
                <option value="Date">Date</option>
            </select>
        </div>
        <div class="form-group col-md-6">
            <label>Order:</label>
            <div class="d-flex align-items-center">
                <div class="form-check mr-3">
                    <input type="radio" id="ascending" name="sortOrder" checked="@(IsAscending)"
                           @onchange="@(() => IsAscending = true)" class="form-check-input" />
                    <label for="ascending" class="form-check-label">Ascending</label>
                </div>
                <div class="form-check">
                    <input type="radio" id="descending" name="sortOrder" checked="@(!IsAscending)"
                           @onchange="@(() => IsAscending = false)" class="form-check-input" />
                    <label for="descending" class="form-check-label">Descending</label>
                </div>
            </div>
        </div>
    </div>
    <button @onclick="ApplySorting" class="btn btn-secondary mt-2">Sort</button>
</div>


<div class="table-container mt-4">
    <table class="transactions-table table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Date</th>
                <th>Tags</th>
                <th>Note</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (FilteredTransactions == null || FilteredTransactions.Count == 0)
            {
                <tr>
                    <td colspan="8">No transactions available</td>
                </tr>
            }
            else
            {
                @foreach (var transaction in FilteredTransactions)
                {
                    <tr>
                        <td>@transaction.TransactionId</td>
                        <td>@transaction.Title</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.Type</td>
                        <td>@transaction.Date</td>
                        <td>
                            @if (!string.IsNullOrEmpty(transaction.Tags))
                            {
                                <div class="tags-wrapper">
                                    @foreach (var tag in transaction.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <span class="tag-badge">@tag.Trim()</span>
                                    }
                                </div>
                            }
                        </td>
                        <td>@transaction.Note</td>
                        <td>
                            <button @onclick="() => NavigateToEditPage(transaction.TransactionId)" class="btn btn-primary btn-sm">Edit</button>
                            <button @onclick="() => DeleteTransaction(transaction.TransactionId)" class="btn btn-danger btn-sm">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<Transaction> transactions = new List<Transaction>();
    private List<Transaction> FilteredTransactions = new List<Transaction>();

    private string SearchTitle;
    private string FilterType;
    private string FilterTags;
    private DateTime? StartDate;
    private DateTime? EndDate;


    // For sorting
    private string SortBy { get; set; } = "Date";
    private bool IsAscending { get; set; } = true;

    private readonly List<string> _defaultTags = new List<string>
    {
        "Yearly", "Monthly", "Food", "Drinks", "Clothes", "Gadgets",
        "Miscellaneous", "Fuel", "Rent", "EMI", "Party"
    };

    protected override async Task OnInitializedAsync()
    {
        // Get all transactions from the service
        try
        {
            transactions = await TransactionService.LoadTransactionsAsync();
            FilteredTransactions = await TransactionService.LoadTransactionsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }

    private async Task LoadTransactionsAsync()
    {
        try
        {
            FilteredTransactions = await TransactionService.LoadTransactionsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }


    private void NavigateToEditPage(int transactionId)
    {
        Nav.NavigateTo($"/edittransaction/{transactionId}");
    }

    private async Task DeleteTransaction(int transactionId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this transaction?");
        if (confirmed)
        {
            try
            {
                await TransactionService.DeleteTransactionAsync(transactionId);
                FilteredTransactions = await TransactionService.LoadTransactionsAsync();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting transaction: {ex.Message}");
            }
        }
    }

    private async Task ApplyFiltersAndSearch()
    {
        var filtered = await TransactionService.FilterTransactionsAsync(StartDate, EndDate, FilterType, FilterTags);
        if (!string.IsNullOrEmpty(SearchTitle))
        {
            filtered = filtered.Where(t => t.Title.Contains(SearchTitle, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        FilteredTransactions = filtered;
    }
    private async Task ApplySorting()
    {
        if (IsAscending)
        {
            // Apply ascending sort
            FilteredTransactions = await TransactionService.SortTransactionsAscending("date");
        }
        else
        {
            // Apply descending sort
            FilteredTransactions = await TransactionService.SortTransactionsDescending("date");
        }
    }
    private async Task ClearFilters()
    {
        SearchTitle = "";
        FilterTags = "";
        FilterType = "";
        StartDate = null;
        EndDate = null;
        SortBy = "Date";
        IsAscending = true;
        await LoadTransactionsAsync();
    }


    private async Task DeleteTag(string tag)
{
    var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the tag '{tag}'?");
    if (confirmed)
    {
        try
        {
            await TagService.DeleteCustomTagAsync(tag);
            // Refresh transactions to update tags
            FilteredTransactions = await TransactionService.LoadTransactionsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error deleting tag: {ex.Message}");
        }
    }
}
}
