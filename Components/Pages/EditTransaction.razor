@page "/edittransaction/{TransactionId:int}"
@using Pennywise.Model;
@using Pennywise.Services.Interfaces;
@inject ITransactionService TransactionService
@inject ITagService TagService
@inject NavigationManager Nav

<h3 class="text-center mb-4">Edit Transaction</h3>

@if (transaction == null)
{
    <p>Loading...</p>
}
else
{
    <div class="form-container p-4 border rounded shadow-sm" style="max-width: 500px; margin: 0 auto;">
        <EditForm Model="@transaction" OnValidSubmit="SaveTransaction">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="title">Title:</label>
                <InputText id="title" class="form-control" @bind-Value="transaction.Title" />
                <ValidationMessage For="@(() => transaction.Title)" />
            </div>

            <div class="form-group mb-3">
                <label for="amount">Amount:</label>
                <InputNumber id="amount" class="form-control" @bind-Value="transaction.Amount" />
                <ValidationMessage For="@(() => transaction.Amount)" />
            </div>

            <div class="form-group mb-3">
                <label for="type">Type:</label>
                <InputText id="type" class="form-control" @bind-Value="transaction.Type" readonly />
            </div>

            <div class="form-group mb-3">
                <label for="date">Date:</label>
                <InputDate id="date" class="form-control" @bind-Value="transaction.Date" />
                <ValidationMessage For="@(() => transaction.Date)" />
            </div>

            <div class="form-group mb-3">
                <label for="tags">Tags:</label>
                <div class="d-flex flex-wrap gap-2 mb-2">
                    @foreach (var tag in availableTags)
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" 
                                   checked="@(selectedTags.Contains(tag))"
                                   @onchange="@(e => ToggleTag(tag))" />
                            <label class="form-check-label">@tag</label>
                        </div>
                    }
                </div>
                <div class="input-group">
                    <input type="text" class="form-control" @bind="newTag" 
                           placeholder="Add custom tag" />
                    <button class="btn btn-outline-secondary" type="button" 
                            @onclick="AddCustomTag">Add Tag</button>
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="note">Note:</label>
                <InputTextArea id="note" class="form-control" @bind-Value="transaction.Note" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="d-flex justify-content-between mt-4">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int TransactionId { get; set; }

    private Transaction transaction;
    private string errorMessage;
    private List<string> availableTags = new List<string>();
    private List<string> selectedTags = new List<string>();
    private string newTag = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var transactions = await TransactionService.LoadTransactionsAsync();
            transaction = transactions.FirstOrDefault(t => t.TransactionId == TransactionId);

            if (transaction == null)
            {
                Nav.NavigateTo("/transactions");
                return;
            }

            // Load available tags
            availableTags = await TagService.GetAllTagsAsync();

            // Initialize selected tags from transaction
            if (!string.IsNullOrEmpty(transaction.Tags))
            {
                selectedTags = transaction.Tags.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(t => t.Trim())
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading transaction: {ex.Message}";
        }
    }

    private void ToggleTag(string tag)
    {
        if (selectedTags.Contains(tag))
            selectedTags.Remove(tag);
        else
            selectedTags.Add(tag);
        
        transaction.Tags = string.Join(",", selectedTags);
    }

    private async Task AddCustomTag()
    {
        if (!string.IsNullOrWhiteSpace(newTag))
        {
            await TagService.AddCustomTagAsync(newTag);
            availableTags = await TagService.GetAllTagsAsync();
            selectedTags.Add(newTag);
            transaction.Tags = string.Join(",", selectedTags);
            newTag = "";
        }
    }

    private async Task SaveTransaction()
    {
        try
        {
            await TransactionService.SaveTransactionAsync(transaction);
            Nav.NavigateTo("/transactions");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/transactions");
    }
}
