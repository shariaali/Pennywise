@page "/edittransaction/{TransactionId:int}"
@using Pennywise.Model;
@using Pennywise.Services.Interfaces;
@inject ITransactionService TransactionService
@inject NavigationManager Nav

<h3 class="text-center mb-4">Edit Transaction</h3>

@if (transaction == null)
{
    <p>Loading...</p>
}
else
{
    <div class="form-container p-4 border rounded shadow-sm" style="max-width: 500px; margin: 0 auto;">
        <EditForm Model="@transaction" OnValidSubmit="SaveTransaction">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="title">Title:</label>
                <InputText id="title" class="form-control" @bind-Value="transaction.Title" />
                <ValidationMessage For="@(() => transaction.Title)" />
            </div>

            <div class="form-group mb-3">
                <label for="amount">Amount:</label>
                <InputNumber id="amount" class="form-control" @bind-Value="transaction.Amount" />
                <ValidationMessage For="@(() => transaction.Amount)" />
            </div>

            <div class="form-group mb-3">
                <label for="type">Type:</label>
                <InputSelect id="type" class="form-control" @bind-Value="transaction.Type">
                    <option value="Inflow">Inflow</option>
                    <option value="Outflow">Outflow</option>
                    <option value="Debt">Debt</option>
                    <option value="Cleared">Cleared</option>
                </InputSelect>
                <ValidationMessage For="@(() => transaction.Type)" />
            </div>

            <div class="form-group mb-3">
                <label for="date">Date:</label>
                <InputDate id="date" class="form-control" @bind-Value="transaction.Date" />
                <ValidationMessage For="@(() => transaction.Date)" />
            </div>

            <div class="form-group mb-3">
                <label for="tags">Tags:</label>
                <InputText id="tags" class="form-control" @bind-Value="transaction.Tags" />
            </div>

            <div class="form-group mb-3">
                <label for="note">Note:</label>
                <InputTextArea id="note" class="form-control" @bind-Value="transaction.Note" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <div class="d-flex justify-content-between mt-4">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" @onclick="Cancel" class="btn btn-secondary">Cancel</button>
            </div>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int TransactionId { get; set; }

    private Transaction transaction;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var transactions = await TransactionService.LoadTransactionsAsync();
            transaction = transactions.FirstOrDefault(t => t.TransactionId == TransactionId);

            if (transaction == null)
            {
                Nav.NavigateTo("/transactions");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading transaction: {ex.Message}";
        }
    }

    private async Task SaveTransaction()
    {
        try
        {
            await TransactionService.SaveTransactionAsync(transaction);
            Nav.NavigateTo("/transactions");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void Cancel()
    {
        Nav.NavigateTo("/transactions");
    }
}
