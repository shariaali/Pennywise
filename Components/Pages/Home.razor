@page "/home"
@using Pennywise.Components.Shared
@using Pennywise.Model
@using Pennywise.Services
@using Pennywise.Services.Interfaces
@inject NavigationManager Nav
@inject IUserService UserService
@inject ITransactionService TransactionService
@inject IJSRuntime JS

<div class="dashboard-page">
    <h2>Hello, @_loggedInUsername!</h2>

    <div class="stats-overview">
        <div class="stat-card">
            <span class="label">Balance</span>
            <span class="value balance">$@_balance.ToString("N2")</span>
        </div>
        <div class="stat-card">
            <span class="label">Incomes</span>
            <span class="value income">$@_totalInflows.ToString("N2")</span>
        </div>
        <div class="stat-card">
            <span class="label">Expenses</span>
            <span class="value expense">$@_totalOutflows.ToString("N2")</span>
        </div>
        <div class="stat-card">
            <span class="label">Cleared Debts</span>
            <span class="value cleared">$@_totalClearedDebt.ToString("N2")</span>
        </div>
        <div class="stat-card">
            <span class="label">Pending Debts</span>
            <span class="value pending">$@_remainingDebt.ToString("N2")</span>
        </div>
    </div>

    <div class="action-buttons">
        <button class="action-btn income-btn" @onclick="AddIncome">
            <i class="fas fa-plus"></i>
            <div>
                <span class="btn-title">Add income</span>
                <span class="btn-subtitle">Create an income manually</span>
            </div>
        </button>
        <button class="action-btn expense-btn" @onclick="AddExpense">
            <i class="fas fa-minus"></i>
            <div>
                <span class="btn-title">Add expense</span>
                <span class="btn-subtitle">Create an expense manually</span>
            </div>
        </button>
        <button class="action-btn debt-btn" @onclick="NavigateToDebts">
            <i class="fas fa-exchange-alt"></i>
            <div>
                <span class="btn-title">Manage Debts</span>
                <span class="btn-subtitle">Manage your debts manually</span>
            </div>
        </button>
    </div>

    <div class="dashboard-grid">
        <div class="transactions-section">
            <div class="section-header">
                <h3>Top transactions</h3>
                <button class="sort-btn">
                    <i class="fas fa-sort"></i> Highest to Lowest
                </button>
            </div>
            <div class="transactions-list">
                @foreach (var transaction in _elements)
                {
                    <div class="transaction-item">
                        <div class="transaction-icon @(transaction.Type.ToLower())">
                            <i class="fas @(transaction.Type == "Inflow" ? "fa-arrow-up" : "fa-arrow-down")"></i>
                        </div>
                        <div class="transaction-details">
                            <span class="transaction-title">@transaction.Title</span>
                            @* <span class="transaction-date">@transaction.Date.ToString("MMM dd, yyyy")</span> *@
                        </div>
                        <span class="transaction-amount @(transaction.Type.ToLower())">
                            @(transaction.Type == "Inflow" ? "+" : "-")$@Math.Abs(transaction.Amount).ToString("N2")
                        </span>
                    </div>
                }
            </div>
        </div>

        <div class="chart-section">
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index"
                     XAxisLabels="@XAxisLabels" Width="100%" Height="350px" />
        </div>
    </div>
</div>

@if (showTransactionModal)
{
    <TransactionModal 
        Transaction="currentTransaction"
        OnSave="HandleTransactionSave"
        OnCancel="() => showTransactionModal = false" />
}

@code {
    private int Index = -1;
    public ChartOptions Options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Income", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Expense", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    private bool _hidePosition;
    private bool _loading;
    private decimal _totalInflows;
    private decimal _totalOutflows;
    private decimal _totalDebt;
    private decimal _totalClearedDebt;
    private decimal _remainingDebt;
    private decimal _balance;
    private bool _isSufficientBalance;

    private IEnumerable<Transaction> _elements = new List<Transaction>();
    private string _loggedInUsername = string.Empty;
    private string _message = string.Empty;

    private bool showTransactionModal;
    private Transaction currentTransaction = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsLoggedIn)
        {
            _loggedInUsername = UserService.LoggedInUser;
            _message = $"Welcome, {_loggedInUsername}!";
        }
        else
        {
            _message = "You are not logged in.";
        }

        var transactions = await TransactionService.LoadTransactionsAsync();
        var sums = TransactionService.CalculateTransactionSums(transactions);
        
        _totalInflows = sums.totalInflows;
        _totalOutflows = sums.totalOutflows;
        _totalDebt = sums.totalDebt;
        _totalClearedDebt = sums.totalClearedDebt;
        _remainingDebt = sums.remainingDebt;
        _balance = sums.balance;
        _isSufficientBalance = sums.isSufficientBalance;
        
        _elements = transactions.OrderByDescending(t => t.Amount).Take(4);
    }

    private void AddIncome()
    {
        currentTransaction = new Transaction 
        { 
            Date = DateTime.Today,
            Type = "Inflow",
            TransactionId = 0
        };
        showTransactionModal = true;
    }

    private void AddExpense()
    {
        currentTransaction = new Transaction 
        { 
            Date = DateTime.Today,
            Type = "Outflow",
            TransactionId = 0
        };
        showTransactionModal = true;
    }

    private async Task HandleTransactionSave(Transaction transaction)
    {
        try
        {
            await TransactionService.SaveTransactionAsync(transaction);
            showTransactionModal = false;
            
            // Refresh data
            var transactions = await TransactionService.LoadTransactionsAsync();
            var sums = TransactionService.CalculateTransactionSums(transactions);
            
            _totalInflows = sums.totalInflows;
            _totalOutflows = sums.totalOutflows;
            _totalDebt = sums.totalDebt;
            _totalClearedDebt = sums.totalClearedDebt;
            _remainingDebt = sums.remainingDebt;
            _balance = sums.balance;
            
            _elements = transactions.OrderByDescending(t => t.Amount).Take(4);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving transaction: {ex.Message}");
        }
    }

    private void NavigateToDebts()
    {
        Nav.NavigateTo("/debts");
    }
}