@page "/home"
@using Pennywise.Components.Shared
@using Pennywise.Model
@using Pennywise.Services
@using Pennywise.Services.Interfaces
@inject NavigationManager Nav
@inject IUserService UserService
@inject ITransactionService TransactionService
@inject IJSRuntime JS
@inject IDebtService DebtService


<div class="dashboard-page">
    
   
    <div class="header-section">
        <h2>@_message</h2>
        <div class="date-filters">
            <div class="form-field">
                <label>Start Date:  </label>
                <input type="date" @bind="StartDate" class="filter-date"/>
            </div>
            <div class="form-field">
                <label>End Date:  </label>
                <input type="date" @bind="EndDate" class="filter-date"/>
            </div>
            <button class="btn-filter" @onclick="ApplyDateFilter">Apply</button>
        </div>
    </div>

    
    <div class="stats-overview">
        <div class="stat-card">
            <span class="label">Balance</span>
            <span class="value balance">@FormatAmount(_balance)</span>
        </div>
        <div class="stat-card">
            <span class="label">Incomes</span>
            <span class="value income">@FormatAmount(_totalInflows)</span>
        </div>
        <div class="stat-card">
            <span class="label">Expenses</span>
            <span class="value expense">@FormatAmount(_totalOutflows)</span>
        </div>
        <div class="stat-card">
            <span class="label">Total Debt</span>
            <span class="value debt">@FormatAmount(_totalDebt)</span>
        </div>
        <div class="stat-card">
            <span class="label">Cleared Debts</span>
            <span class="value cleared">@FormatAmount(_totalClearedDebt)</span>
        </div>
        <div class="stat-card">
            <span class="label">Pending Debts</span>
            <span class="value pending">@FormatAmount(_remainingDebt)</span>
        </div>
    </div>

    <div class="action-buttons">
        <button class="action-btn income-btn" @onclick="AddIncome">
            <i class="fas fa-plus"></i>
            <div>
                <span class="btn-title">Add income</span>
                <span class="btn-subtitle">Create an income manually</span>
            </div>
        </button>
        <button class="action-btn expense-btn" @onclick="AddExpense">
            <i class="fas fa-minus"></i>
            <div>
                <span class="btn-title">Add expense</span>
                <span class="btn-subtitle">Create an expense manually</span>
            </div>
        </button>
        <button class="action-btn debt-btn" @onclick="NavigateToDebts">
            <i class="fas fa-exchange-alt"></i>
            <div>
                <span class="btn-title">Manage Debts</span>
                <span class="btn-subtitle">Manage your debts manually</span>
            </div>
        </button>
    </div>


    <div class="dashboard-grid">
        <div class="transactions-section">
            <div class="section-header">
                <h3>Highest Transactions</h3>
            </div>
            <div class="transactions-list">
                @foreach (var transaction in _highestTransactions)
                {
                    <div class="transaction-item">
                        <div class="transaction-icon @GetTransactionClass(transaction)">
                            <i class="fas @GetTransactionIcon(transaction)"></i>
                        </div>
                        <div class="transaction-details">
                            <span class="transaction-title">@transaction.Title</span>
                            <span class="transaction-date">@transaction.Date.ToShortDateString()</span>
                        </div>
                        <span class="transaction-amount @GetTransactionClass(transaction)">
                            @(transaction.Type == "Inflow" ? "+" : "-")@FormatAmount(Math.Abs(transaction.Amount))
                        </span>
                    </div>
                }
            </div>
        </div>

     
        <div class="expenses-chart">
            <h3>Spending by Category</h3>
            <MudChart ChartType="ChartType.Donut" 
                     LegendPosition="Position.Bottom" 
                     Width="300px" 
                     Height="300px" 
                     InputData="@data" 
                     InputLabels="@labels">
            </MudChart>
        </div>

       
        <div class="transactions-section">
            <div class="section-header">
                <h3>Lowest Transactions</h3>
            </div>
            <div class="transactions-list">
                @foreach (var transaction in _lowestTransactions)
                {
                    <div class="transaction-item">
                        <div class="transaction-icon @GetTransactionClass(transaction)">
                            <i class="fas @GetTransactionIcon(transaction)"></i>
                        </div>
                        <div class="transaction-details">
                            <span class="transaction-title">@transaction.Title</span>
                            <span class="transaction-date">@transaction.Date.ToShortDateString()</span>
                        </div>
                        <span class="transaction-amount @GetTransactionClass(transaction)">
                            @(transaction.Type == "Inflow" ? "+" : "-")@FormatAmount(Math.Abs(transaction.Amount))
                        </span>
                    </div>
                }
            </div>
        </div>

        

        <div class="pending-debts">
            <div class="section-header">
                <h3>Pending debts</h3>
                <button class="view-all" @onclick="NavigateToDebts">View All Debts</button>
            </div>
            <div class="debts-list">
                <table>
                    <thead>
                        <tr>
                            <th>Debt Source</th>
                            <th>Payment Due Date</th>
                            <th>Amount</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (_pendingDebts == null || !_pendingDebts.Any())
                        {
                            <tr>
                                <td colspan="4">No pending debts</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var debt in _pendingDebts)
                            {
                                <tr>
                                    <td>@debt.Source</td>
                                    <td>@debt.DueDate.ToString("yyyy/MM/dd")</td>
                                    <td>@FormatAmount(debt.Amount)</td>
                                    
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    
</div>

@if (showTransactionModal)
{
    <TransactionModal 
        Transaction="currentTransaction"
        OnSave="HandleTransactionSave"
        OnCancel="() => showTransactionModal = false"
        CurrentBalance="_balance" />
}

@code {
    // Chart configuration properties
    private int Index = -1;
    

    public Position LegendPosition { get; set; } = Position.Bottom;
    private bool _hidePosition;
    private bool _loading;
    private decimal _totalInflows;
    private decimal _totalOutflows;
    private decimal _totalDebt;
    private decimal _totalClearedDebt;
    private decimal _remainingDebt;
    private decimal _balance;
    private bool _isSufficientBalance;

    private string _loggedInUsername = string.Empty;
    private string _message = string.Empty;

    private bool showTransactionModal;
    private Transaction currentTransaction = new();

    private List<Debt> _pendingDebts = new();

    private double[] data;
    private string[] labels;

    private IEnumerable<Transaction> _highestTransactions = new List<Transaction>();
    private IEnumerable<Transaction> _lowestTransactions = new List<Transaction>();

    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }

    private string PreferredCurrency => UserService.PreferredCurrency;

    /* Initializes dashboard data and loads initial
       transactions and debts */
    protected override async Task OnInitializedAsync()
    {
        if (UserService.IsLoggedIn)
        {
            _loggedInUsername = UserService.LoggedInUser;
            _message = $"Welcome, {_loggedInUsername}!";
        }
        else
        {
            _message = "You are not logged in.";
        }

        var transactions = await TransactionService.LoadTransactionsAsync();
        var sums = TransactionService.CalculateTransactionSums(transactions);
        
        // Load debt data
        var debts = await DebtService.GetAllDebtsAsync();
        var debtSummary = DebtService.CalculateDebtSummary(debts);
        
        // Load pending debts
        _pendingDebts = debts.Where(d => d.Status == "PENDING")
                            .OrderBy(d => d.DueDate)
                            .Take(5)
                            .ToList();
        
        _totalInflows = sums.totalInflows;
        _totalOutflows = sums.totalOutflows;
        _totalDebt = debtSummary.totalDebt;
        _totalClearedDebt = debtSummary.clearedDebt;
        _remainingDebt = debtSummary.pendingDebt;
        _balance = sums.balance;
        _isSufficientBalance = sums.isSufficientBalance;
        
        // Load highest and lowest transactions
        _highestTransactions = transactions
            .OrderByDescending(t => Math.Abs(t.Amount))
            .Take(5);
        
        _lowestTransactions = transactions
            .OrderBy(t => Math.Abs(t.Amount))
            .Take(5);

        // Calculate tag percentages for the donut chart
        var chartData = CalculateTagPercentages(transactions);
        data = chartData.data;
        labels = chartData.labels;
    }

    // Handlers for adding new transactions
    private void AddIncome()
    {
        currentTransaction = new Transaction 
        { 
            Date = DateTime.Today,
            Type = "Inflow",
            TransactionId = 0
        };
        showTransactionModal = true;
    }

    private void AddExpense()
    {
        currentTransaction = new Transaction 
        { 
            Date = DateTime.Today,
            Type = "Outflow",
            TransactionId = 0
        };
        showTransactionModal = true;
    }

    /* Saves transaction and refreshes dashboard
       data */
    private async Task HandleTransactionSave(Transaction transaction)
    {
        try
        {
            await TransactionService.SaveTransactionAsync(transaction);
            showTransactionModal = false;
            
            // Refresh data
            var transactions = await TransactionService.LoadTransactionsAsync();
            var sums = TransactionService.CalculateTransactionSums(transactions);
            var debts = await DebtService.GetAllDebtsAsync();
            var debtSummary = DebtService.CalculateDebtSummary(debts);
            
            // Update both transaction lists
            _highestTransactions = transactions
                .OrderByDescending(t => Math.Abs(t.Amount))
                .Take(5);
            
            _lowestTransactions = transactions
                .OrderBy(t => Math.Abs(t.Amount))
                .Take(5);
            
            _totalInflows = sums.totalInflows;
            _totalOutflows = sums.totalOutflows;
            _totalDebt = debtSummary.totalDebt;
            _totalClearedDebt = debtSummary.clearedDebt;
            _remainingDebt = debtSummary.pendingDebt;
            _balance = sums.balance;

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving transaction: {ex.Message}");
        }
    }

    // Navigation helper methods
    private void NavigateToDebts()
    {
        Nav.NavigateTo("/debts");
    }

    /* Calculates percentages for spending by
       category donut chart */
    private (double[] data, string[] labels) CalculateTagPercentages(IEnumerable<Transaction> transactions)
    {
        if (transactions == null || !transactions.Any())
            return (new double[] { 100 }, new string[] { "No Data" });

        // Get all unique tags from transactions
        var tagAmounts = new Dictionary<string, decimal>();
        
        foreach (var transaction in transactions)
        {
            if (string.IsNullOrEmpty(transaction.Tags))
                continue;

            var tags = transaction.Tags.Split(',').Select(t => t.Trim());
            foreach (var tag in tags)
            {
                if (tagAmounts.ContainsKey(tag))
                    tagAmounts[tag] += Math.Abs(transaction.Amount);
                else
                    tagAmounts[tag] = Math.Abs(transaction.Amount);
            }
        }

        // Calculate percentages
        var totalAmount = tagAmounts.Values.Sum();
        var percentages = tagAmounts
            .OrderByDescending(x => x.Value)
            .Take(5) // Take top 5 tags for better visualization
            .ToList();

        var data = percentages.Select(x => (double)((x.Value / totalAmount) * 100)).ToArray();
        var labels = percentages.Select(x => x.Key).ToArray();

        return (data, labels);
    }

    // Helper methods for transaction display
    private string GetTransactionClass(Transaction transaction)
    {
        return transaction.Type switch
        {
            "Inflow" => "inflow",
            "DEBT" => "outflow",
            _ => "outflow"
        };
    }

    private string GetTransactionIcon(Transaction transaction)
    {
        return transaction.Type switch
        {
            "Inflow" => "fa-plus",
            "DEBT" => "fa-minus",
            _ => "fa-minus"
        };
    }

    /* Applies date filter and updates all dashboard
       data */
    private async Task ApplyDateFilter()
    {
        var transactions = await TransactionService.LoadTransactionsAsync();
        var debts = await DebtService.GetAllDebtsAsync();

        if (StartDate.HasValue && EndDate.HasValue)
        {
            transactions = transactions.Where(t => t.Date >= StartDate && t.Date <= EndDate).ToList();
            debts = debts.Where(d => d.DueDate >= StartDate && d.DueDate <= EndDate).ToList();
        }

        var sums = TransactionService.CalculateTransactionSums(transactions);
        var debtSummary = DebtService.CalculateDebtSummary(debts);
        
        var combinedSums = (
            totalInflows: sums.totalInflows,
            totalOutflows: sums.totalOutflows,
            totalDebt: debtSummary.totalDebt,
            totalClearedDebt: debtSummary.clearedDebt,
            remainingDebt: debtSummary.pendingDebt,
            balance: sums.balance,
            isSufficientBalance: sums.isSufficientBalance
        );
        
        UpdateDashboardData(transactions, combinedSums, debts, debtSummary);
    }

    /* Updates all dashboard data with filtered
       results */
    private void UpdateDashboardData(
        IEnumerable<Transaction> transactions, 
        (decimal totalInflows, decimal totalOutflows, decimal totalDebt, decimal totalClearedDebt, 
         decimal remainingDebt, decimal balance, bool isSufficientBalance) sums,
        List<Debt> debts, 
        (decimal totalDebt, decimal clearedDebt, decimal pendingDebt, int totalCount) debtSummary)
    {
        _totalInflows = sums.totalInflows;
        _totalOutflows = sums.totalOutflows;
        _totalDebt = debtSummary.totalDebt;
        _totalClearedDebt = debtSummary.clearedDebt;
        _remainingDebt = debtSummary.pendingDebt;
        _balance = sums.balance;
        _isSufficientBalance = sums.isSufficientBalance;
        
        _highestTransactions = transactions
            .OrderByDescending(t => Math.Abs(t.Amount))
            .Take(5)
            .ToList();
        
        _lowestTransactions = transactions
            .OrderBy(t => Math.Abs(t.Amount))
            .Take(5)
            .ToList();
        
        _pendingDebts = debts.Where(d => d.Status == "PENDING")
            .OrderBy(d => d.DueDate)
            .Take(5)
            .ToList();

        var chartData = CalculateTagPercentages(transactions);
        data = chartData.data;
        labels = chartData.labels;
    }

    // Currency formatting helper methods
    private string GetCurrencySymbol()
    {
        switch (PreferredCurrency)
        {
            case "USD":
                return "$";
            case "NPR":
                return "Rs.";
            default:
                return "$";  // Default to USD if no currency is selected
        }
    }

    // Helper to format amounts with the currency symbol
    private string FormatAmount(decimal amount)
    {
        return $"{GetCurrencySymbol()} {amount:N2}";
    } 
}
