@page "/debts"
@using Pennywise.Components.Shared
@using System.Text
@using Pennywise.Model
@using Pennywise.Services.Interfaces
@using Pennywise.Services
@inject IDebtService DebtService
@inject ITransactionService TransactionService
@inject IJSRuntime JS
@inject IFileExportService FileExportService
@inject IUserService UserService


<div class="debts-page">
    <div class="header">
        <div class="header-left">
            <h3>Manage Debts</h3>
        </div>
        <div class="actions">
            <button class="sort-btn" @onclick="ToggleSort">
                <i class="fas fa-sort"></i>
                @(IsAscending ? "Oldest First" : "Newest First")
            </button>
            <button class="btn-export" @onclick="ExportToCsv">
                Export CSV <i class="fas fa-download"></i>
            </button>
            <button class="action-btn btn-add" @onclick="AddDebt">
                Add Debt <i class="fas fa-plus"></i>
            </button>
        </div>
    </div>

    <div class="stats-cards">
        <div class="stat-card">
            <span class="label">Total Debt Count</span>
            <span class="value">@_totalCount</span>
        </div>
        <div class="stat-card">
            <span class="label">Cleared Debts</span>
            <span class="value positive">@FormatAmount(_clearedDebt)</span>
        </div>
        <div class="stat-card">
            <span class="label">Pending Debts</span>
            <span class="value negative">@FormatAmount(_pendingDebt)</span>
        </div>
    </div>

    <div class="filters">
        <div class="search-box">
            <input type="text" @bind="SearchSource" placeholder="Search by Source" />
        </div>
        <select @bind="StatusFilter" class="filter-select">
            <option value="">Status</option>
            <option value="PENDING">Pending</option>
            <option value="CLEARED">Cleared</option>
        </select>
        <div class="form-field">
            <label>Start Date</label>
            <input type="date" @bind="StartDate" class="filter-date"/>
        </div>
        <div class="form-field">
            <label>End Date</label>
            <input type="date" @bind="EndDate" class="filter-date"/>
        </div>
        <button class="btn-filter" @onclick="ApplyFiltersAndSearch">Apply Filters</button>
        <button class="btn-clear" @onclick="ClearFilters">Clear</button>
    </div>

    
    <div class="transactions-table">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
        <table>
            <thead>
                <tr>
                    <th>Source of Debt</th>
                    <th>Status</th>
                    <th>Due Date</th>
                    <th>Amount</th>
                    <th>Clear Debt</th>
                    <th>Notes</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (FilteredDebts == null || !FilteredDebts.Any())
                {
                    <tr>
                        <td colspan="7">No debts available</td>
                    </tr>
                }
                else
                {
                    @foreach (var debt in FilteredDebts)
                    {
                        <tr>
                            <td>@debt.Source</td>
                            <td>
                                <span class="@(debt.Status == "CLEARED" ? "credit-badge" : "debit-badge")">
                                    @debt.Status
                                </span>
                            </td>
                            <td>@debt.DueDate.ToShortDateString()</td>
                            <td>@FormatAmount(debt.Amount)</td>
                            <td>
                                @if (debt.Status == "PENDING")
                                {
                                    <button class="btn-clear" @onclick="() => ClearDebt(debt)">Clear</button>
                                }
                                else
                                {
                                    <span>Clear</span>
                                }
                            </td>
                            <td>@debt.Notes</td>
                            <td>
                                <button class="action-menu" @onclick="() => ToggleDropdown(debt.DebtId)">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                @if (activeDropdown == debt.DebtId)
                                {
                                    <div class="dropdown-menu show">
                                        <div class="dropdown-item" @onclick="() => DeleteDebt(debt.DebtId)">
                                            <i class="fas fa-trash"></i> Delete
                                        </div>
                                    </div>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>


@if (showDebtModal)
{
    <DebtModal 
        Debt="currentDebt"
        OnSave="HandleDebtSave"
        OnCancel="() => showDebtModal = false" />
}

@code {
    // Private fields for storing debt data and state
    private List<Debt> AllDebts = new();
    private List<Debt> FilteredDebts = new();
    private string SearchSource = "";
    private string StatusFilter = "";
    private DateTime? StartDate;
    private DateTime? EndDate;
    private int? activeDropdown;
    private bool showDebtModal;
    private Debt currentDebt = new();
    
    private decimal _totalDebt;
    private decimal _clearedDebt;
    private decimal _pendingDebt;
    private int _totalCount;

    private string PreferredCurrency => UserService.PreferredCurrency;

    private bool IsAscending { get; set; } = true;

    private string errorMessage;

    /* 
     * Lifecycle method that loads debts when component initializes
     */
    protected override async Task OnInitializedAsync()
    {
        await LoadDebtsAsync();
    }

    // Loads all debts and calculates summary statistics
    private async Task LoadDebtsAsync()
    {
        try
        {
            AllDebts = await DebtService.GetAllDebtsAsync();
            FilteredDebts = new List<Debt>(AllDebts);
            
            if (IsAscending)
            {
                FilteredDebts = FilteredDebts.OrderBy(d => d.DueDate).ToList();
            }
            else
            {
                FilteredDebts = FilteredDebts.OrderByDescending(d => d.DueDate).ToList();
            }
            
            var summary = DebtService.CalculateDebtSummary(AllDebts);
            _totalDebt = summary.totalDebt;
            _clearedDebt = summary.clearedDebt;
            _pendingDebt = summary.pendingDebt;
            _totalCount = summary.totalCount;
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading debts: {ex.Message}");
        }
    }

    // Handles adding a new debt
    private void AddDebt()
    {
        currentDebt = new Debt 
        { 
            DueDate = DateTime.Today,
            Status = "PENDING"
        };
        showDebtModal = true;
    }

    // Saves debt changes to the database
    private async Task HandleDebtSave(Debt debt)
    {
        try
        {
            if (debt.DebtId == 0)
            {
                await DebtService.AddDebtAsync(debt);
                showDebtModal = false;
                // Clear any existing filters when adding new debt
                await ClearFilters();
                // Reload debts and update UI
                await LoadDebtsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error saving debt: {ex.Message}");
        }
    }

    private async Task ClearDebt(Debt debt)
    {
        try
        {
            await DebtService.ClearDebtAsync(debt.DebtId, debt.Amount);
            await LoadDebtsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            StateHasChanged();
        }
    }

    private async Task DeleteDebt(int debtId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this debt?");
        if (confirmed)
        {
            try
            {
                await DebtService.DeleteDebtAsync(debtId);
                await LoadDebtsAsync();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"Error deleting debt: {ex.Message}");
            }
        }
        activeDropdown = null;
    }

    private void ToggleDropdown(int debtId)
    {
        activeDropdown = activeDropdown == debtId ? null : debtId;
    }

    /* 
     * Export functionality
     * Generates CSV file with filtered debt data
     */
    private async Task ExportToCsv()
    {
        try
        {
            var debts = FilteredDebts ?? await DebtService.GetAllDebtsAsync();
            
            // Create CSV content
            var csvContent = new StringBuilder();
            csvContent.AppendLine("Source,Amount,Due Date,Status,Notes,Cleared Date");
            
            foreach (var debt in debts)
            {
                var line = $"{debt.Source},{FormatAmount(debt.Amount)},{debt.DueDate:yyyy-MM-dd}," +
                          $"{debt.Status},{debt.Notes},{debt.ClearedDate:yyyy-MM-dd}";
                csvContent.AppendLine(line);
            }

            var fileName = $"debts_export_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            await FileExportService.ExportToCsvAsync(csvContent.ToString(), fileName);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error exporting debts: {ex.Message}");
        }
    }

    // Applies selected filters to the debt list
    private async Task ApplyFiltersAndSearch()
    {
        FilteredDebts = AllDebts;

        // Apply existing filters
        if (!string.IsNullOrEmpty(SearchSource))
        {
            FilteredDebts = FilteredDebts.Where(d => 
                d.Source.Contains(SearchSource, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(StatusFilter))
        {
            FilteredDebts = FilteredDebts.Where(d => d.Status == StatusFilter).ToList();
        }

        if (StartDate.HasValue)
        {
            FilteredDebts = FilteredDebts.Where(d => d.DueDate >= StartDate.Value).ToList();
        }

        if (EndDate.HasValue)
        {
            FilteredDebts = FilteredDebts.Where(d => d.DueDate <= EndDate.Value).ToList();
        }

        // Apply sorting
        if (IsAscending)
        {
            FilteredDebts = FilteredDebts.OrderBy(d => d.DueDate).ToList();
        }
        else
        {
            FilteredDebts = FilteredDebts.OrderByDescending(d => d.DueDate).ToList();
        }
    }

    private async Task ClearFilters()
    {
        SearchSource = "";
        StatusFilter = "";
        StartDate = null;
        EndDate = null;
        await LoadDebtsAsync();
    }

    // Helper method to format currency amounts
    private string GetCurrencySymbol()
    {
        switch (PreferredCurrency)
        {
            case "USD":
                return "$";
            case "NPR":
                return "Rs.";
            default:
                return "$";  // Default to USD if no currency is selected
        }
    }

    private string FormatAmount(decimal amount)
    {
        return $"{GetCurrencySymbol()} {amount:N2}";
    }

    // Toggles sort order between ascending and descending
    private void ToggleSort()
    {
        IsAscending = !IsAscending;
        if (IsAscending)
        {
            FilteredDebts = FilteredDebts.OrderBy(d => d.DueDate).ToList();
        }
        else
        {
            FilteredDebts = FilteredDebts.OrderByDescending(d => d.DueDate).ToList();
        }
    }
}
