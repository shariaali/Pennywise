@page "/login"
@using System.ComponentModel.DataAnnotations
@using Pennywise.Services.Interfaces
@using Pennywise.Model
@inject NavigationManager Nav
@inject IUserService UserService

/* 
 * Main login container with two sections:
 * 1. Left side - Branding and marketing content
 * 2. Right side - Login form
 */
<div class="login-container">
    // Left section with logo and welcome message
    <div class="login-left">
        <img src="/images/logo.png" alt="PennyWise" class="logo" />
        <h1>Personal Finance<br />Simplified...</h1>
        <p class="subtitle">
            Take control of your finances with ease. Track your income, expenses, and debts, all in one place. 
            Your financial journey starts here.
        </p>
    </div>

    // Right section containing the login form
    <div class="login-right">
        <div class="login-form">
            // Form header
            <h2>WELCOME BACK!</h2>
            <h3>Log In to your Account</h3>

            <!-- Login form using Blazor's EditForm component with validation -->
            <EditForm Model="@Users" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                // Username input field
                <div class="form-group">
                    <label>Username</label>
                    <input type="text" class="form-control" @bind="Users.Username" 
                           placeholder="jonedoe123" />
                    <ValidationMessage For="@(() => Users.Username)" />
                </div>

                // Currency selection dropdown
                <div class="form-group">
                    <label>Currency</label>
                    <select class="form-control currency-select" @bind="Users.PreferredCurrency">
                        <option value="USD">
                            $ - US Dollar (USD)
                        </option>
                        <option value="NPR">
                            Rs. - Nepalese Rupee (NPR)
                        </option>
                    </select>
                </div>

                /* Password input field with toggle visibility feature
                   Uses a combination of input and button for show/hide functionality */
                <div class="form-group">
                    <label>Password</label>
                    <div class="password-input">
                        <input type="@(showPassword ? "text" : "password")" 
                               class="form-control" 
                               @bind="Users.Password" />
                        <button type="button" class="toggle-password" @onclick="TogglePasswordVisibility">
                            <i class="@(showPassword ? "oi oi-eye" : "oi oi-eye-closed")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => Users.Password)" />
                </div>

                // Error message display section
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger">@ErrorMessage</div>
                }

                <button type="submit" class="btn-continue">CONTINUE</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // Private fields and properties for component state
    private string? ErrorMessage;
    private bool showPassword;
    public User Users { get; set; } = new();

    // Toggles password visibility between plain text and masked characters
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    /* 
     * Handles the login form submission
     * Attempts to log in the user and:
     * - Redirects to home page on success
     * - Shows error message on failure
     */
    private async Task HandleLogin()
    {
        if (UserService.Login(Users))
        {
            Nav.NavigateTo("/home");
        }
        else
        {
            ErrorMessage = "Invalid username or password.";
        }
    }
}
