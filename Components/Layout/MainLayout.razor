@using Pennywise.Model;
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@* Required *@
<MudThemeProvider />
<MudPopoverProvider />
@* Needed for dialogs *@
<MudDialogProvider />
@* Needed for snackbars *@
<MudSnackbarProvider />

@*<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Income Expense Tracker</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>*@


<MudLayout>
    @if (!IsLoginPage)
    {
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Typo="Typo.h5" Class="ml-3">Income Expense Tracker App</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@((e)=>ShowLogoutConfirmation())">Logout</MudButton>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>
    }
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@if (IsLogout)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block; background-color: rgba(0, 0, 0, 0.5); position: fixed; top: 0; left: 0; width: 100%; height: 100%; overflow: auto;">
        <div class="modal-dialog" role="document" style="margin-top: 20%; margin-left: auto; margin-right: auto; max-width: 400px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Logout</h5>
                    <button type="button" class="close" @onclick="HideLogoutConfirmation">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to logout?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideLogoutConfirmation">No</button>
                    <button type="button" class="btn btn-primary" @onclick="Logout">Yes</button>
                </div>
            </div>
        </div>
    </div>
}


@*<div class="page">
    @if(_globalState.CurrentUser != null)
    {
        <div class="sidebar">
            <NavMenu Username="@_globalState.CurrentUser.Username"  LogoutHandler="LogoutHandler" />
        </div>
    }
    <main>
        <article class="content px-4">


        </article>
    </main>
</div>*@

@code {
    bool _drawerOpen = true;
    bool IsLoginPage => Navigation.Uri.Contains("/login", StringComparison.OrdinalIgnoreCase);

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private bool IsLogout { get; set; } = false;
    private void Logout()
    {
        // Clear login state if necessary (not required in this simple setup)
        IsLogout = false; // Ensure the modal does not display after navigating.
        Navigation.NavigateTo("/login");
    }

    private void ShowLogoutConfirmation()
    {
        IsLogout = true;
    }

    private void HideLogoutConfirmation()
    {
        IsLogout = false;
    }
}

